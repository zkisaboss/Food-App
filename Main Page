import random
import json


def create_account():
    username = input("Enter a username: ")
    password = input("Enter a password: ")
    account = {username: password}
    with open(f"{username}.json", "w") as f:
        json.dump(account, f)
    print("Account created successfully!")


def login():
    username = input("Enter your username: ")
    password = input("Enter your password: ")
    try:
        with open(f"{username}.json", "r") as f:
            account = json.load(f)
            if account[username] == password:
                print("Login successful!")
            else:
                print("Invalid username/password combination")
    except FileNotFoundError:
        print("Account does not exist.")


def ask_user_preference(first_choice, second_choice):
    print(f"Do you prefer: {first_choice} or {second_choice}?")
    choice = int(input("Enter 1 for the first option or 2 for the second: "))
    return choice


def gather_food_preferences(food_storage):
    choice_data = []
    first_food = random.choice(food_storage)

    for _ in range(min(14, len(food_storage) - 1)):
        second_food = random.choice([
            food for food in food_storage if food != first_food
        ])
        choice = ask_user_preference(first_food, second_food)

        if choice == 2:
            first_food, second_food = second_food, first_food

        choice_data.append((first_food, second_food))
        food_storage.remove(second_food)

    food_storage.remove(first_food)
    return choice_data


def store_local(choice_data, food_storage):
    local_dict = {}
    for choice_tuple in choice_data:
        food1, food2 = choice_tuple

        if food1 not in local_dict:
            local_dict[food1] = local_dict.get(food2, 0) + 1
        else:
            local_dict[food1] += 1

        if food2 not in local_dict:
            food_storage.append(food2)

    return local_dict, food_storage


def update_global(local_dict, global_dict):
    for food, count in local_dict.items():
        if food in global_dict:
            global_dict[food] += count
        else:
            global_dict[food] = count

    return dict(sorted(global_dict.items(), key=lambda item: item[1], reverse=True))


def confirmation():
    print("Do you want to re-try or continue?")
    answer = int(input("Enter 1 to Re-Try or 2 to Continue: "))
    return answer == 2


if __name__ == '__main__':
    food_storage = [
        "pizza",
        "chicken",
        "rice",
        "noodles",
        "tandoori chicken",
        "spaghetti",
        "sushi",
        "steak",
        "hamburger",
        "tacos",
        "barbecue ribs",
        "dumplings",
        "soup",
        "waffles",
        "pulled pork",
        "grilled salmon",
        "calamari",
    ]

    global_dict = {
        'steak': 14,
        'barbecue ribs': 11,
        'pulled pork': 10,
        'chicken': 7,
        'grilled salmon': 3,
        'rice': 1,
    }

    while True:
        choice = input("Enter '1' to create a new account or '2' to login to an existing one: ")
        if choice == '1':
            create_account()
            break
        elif choice == '2':
            login()
            break
        else:
            print("Invalid choice. Please enter '1' or '2'.")

    while True:
        choice_data = gather_food_preferences(food_storage)
        local_dict, food_storage = store_local(choice_data, food_storage)
        global_dict = update_global(local_dict, global_dict)
        user_confirmation = confirmation()

        if user_confirmation:
            break

    print(global_dict)
    
    # Search Results Using Geolocation
    # Fetch Geolocation
    # Fetch Stores <=15m from Geolocation
    # Filter Using element[-1] of local dict
    # Sort filtered by most stars to least stars

    """
    Ask a data scientist/analyst to recommend a system for sorting the menus
    """