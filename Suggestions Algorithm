import json
import os
import sys
from collections import defaultdict
from typing import Any, Dict, List

import numpy as np
from scipy.spatial.distance import cosine


def read_json_file(filename: str) -> Dict[str, Any]:
    with open(filename, 'r') as file:
        return json.load(file)


def calculate_similarity(u1: Dict[str, Any], u2: Dict[str, Any]) -> float:
    items = list(set(u1.keys()) & set(u2.keys()))
    if not items:
        return 0.0
    u1_vec = np.array([u1[i] for i in items])
    u2_vec = np.array([u2[i] for i in items])
    return 1 - cosine(u1_vec, u2_vec)


def suggest_items(user_data: Dict[str, Any], users: List[Dict[str, Any]]) -> List[str]:
    similarities = defaultdict(float)
    for user in users:
        if user != user_data:
            similarity = calculate_similarity(user_data, user)
            similarities[json.dumps(user)] = similarity
    if not similarities:
        return []
    max_similarity = max(similarities.values())
    if max_similarity == 0.0:
        return []
    suggestions = []
    for user_json, similarity in similarities.items():
        if similarity == max_similarity:
            user = json.loads(user_json)
            suggestions.extend(
                item
                for item, value in user.items()
                if item not in user_data or user_data[item] < value
            )
    return sorted(suggestions, key=lambda item: user_data.get(item, 0.0))


def get_user_data(filename: str) -> Dict[str, Any]:
    data = read_json_file(filename)
    return {
        item: value
        for item, value in data['global_dict'].items()
        if isinstance(value, (int, float)) and value > 0
    }


def main():
    directory = sys.argv[1] if len(sys.argv) > 1 else '.'
    users = []
    for filename in os.listdir(directory):
        if filename.endswith('.json'):
            user_data = get_user_data(os.path.join(directory, filename))
            users.append(user_data)
    for i, user_data in enumerate(users):
        print(f'User {i + 1} preferences:')
        for item, value in sorted(user_data.items()):
            print(f' - {item}: {value}')
        if suggestions := suggest_items(user_data, users):
            print('Suggestions:')
            for item in suggestions:
                print(f' - {item}')
        else:
            print('No suggestions found.')


if __name__ == '__main__':
    main()
